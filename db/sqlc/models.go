// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type Currency string

const (
	CurrencyUSD Currency = "USD"
	CurrencyVND Currency = "VND"
	CurrencyEUR Currency = "EUR"
)

func (e *Currency) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Currency(s)
	case string:
		*e = Currency(s)
	default:
		return fmt.Errorf("unsupported scan type for Currency: %T", src)
	}
	return nil
}

type NullCurrency struct {
	Currency Currency `json:"Currency"`
	Valid    bool     `json:"valid"` // Valid is true if Currency is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCurrency) Scan(value interface{}) error {
	if value == nil {
		ns.Currency, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Currency.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCurrency) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Currency), nil
}

type Account struct {
	ID        int64          `json:"id"`
	Gmail     sql.NullString `json:"gmail"`
	Owner     string         `json:"owner"`
	Balance   int64          `json:"balance"`
	Currency  string         `json:"currency"`
	CreatedAt time.Time      `json:"created_at"`
}

type Entry struct {
	ID     int64          `json:"id"`
	Title  sql.NullString `json:"title"`
	Amount int64          `json:"amount"`
	// Content of the entry
	Descripton sql.NullString `json:"descripton"`
	AccountID  sql.NullInt64  `json:"account_id"`
	CreatedAt  sql.NullTime   `json:"created_at"`
}

type Transfer struct {
	ID            int64         `json:"id"`
	FromAccountID sql.NullInt32 `json:"from_account_id"`
	ToAccountID   sql.NullInt32 `json:"to_account_id"`
	Amount        sql.NullInt64 `json:"amount"`
	CreatedAt     time.Time     `json:"created_at"`
}
